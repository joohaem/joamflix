{"version":3,"sources":["assets/noPosterSmall.png","Components/Header.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Header","styled","header","List","ul","Item","li","props","current","SLink","Link","withRouter","pathname","location","to","Container","div","Title","span","Grid","Section","title","children","role","aria-label","Text","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","noPoster","HomePresenter","nowPlaying","popular","upcoming","loading","error","Helmet","Loader","length","map","movie","poster_path","original_title","vote_average","release_date","substring","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","a","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","e","console","log","preventDefault","searchByTerm","target","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","require","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","Number","isNaN","request","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7fd6a9e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 80px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${props => (props.current ? \"#3498db\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst HeaderComponent = ({ location: { pathname } }) => (\r\n  <Header>\r\n    <List>\r\n      <Item current={pathname === \"/\"}>\r\n        <SLink to=\"/\">Movies</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/tv\"}>\r\n        <SLink to=\"/tv\">TV</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/search\"}>\r\n        <SLink to=\"/search\">Search</SLink>\r\n      </Item>\r\n    </List>\r\n  </Header>\r\n);\r\n\r\nexport default withRouter(HeaderComponent);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n// children은 Secntion 태그 사이 내용을 불러온다\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ])\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      ⏰\r\n    </span>\r\n    {/*Emoji는 span으로 감싸져야 하고,\r\n      image role이 있어야 하며,\r\n      접근성(스크린리더가 읽을 aria-label 속성)이 있어야 한다*/}\r\n  </Container>\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport noPoster from \"assets/noPosterSmall.png\";\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${props => props.bgUrl});\r\n  height: 180px;\r\n  background-size: cover;\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n  bottom: 5px;\r\n  right: 5px;\r\n  position: absolute;\r\n  opacity: 0;\r\n  transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\nmargin-bottom: 5px;\r\nposition: relative;\r\n&:hover {\r\n  ${Image} {\r\n    opacity: 0.3;\r\n  }\r\n  ${Rating} {\r\n    opacity: 1;\r\n  }\r\n}\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n  margin-bottom: 3px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n      <Image\r\n          bgUrl = {\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n              : noPoster\r\n          }\r\n        />\r\n        <Rating>\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ⭐️\r\n          </span>{\" \"}\r\n          {rating}/10\r\n          {/*이미지는 span으로 감싸져야 하고,\r\n            image role이 있어야 하며,\r\n            접근성(스크린리더가 읽을 aria-label 속성)이 있어야 한다*/}\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>{title}</Title>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imageUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) =>\r\n  <>\r\n    <Helmet>\r\n      <title>Movies | Joamflix</title>\r\n    </Helmet>\r\n    {\r\n      loading ? <Loader /> : (\r\n      <Container>\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n          <Section title=\"Now Playing\">\r\n            {nowPlaying.map(movie =>\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            )}\r\n            {/*span 태그에 넣어 children props가 grid CSS 얻을 수 있게*/}\r\n          </Section>\r\n        )}\r\n        {/*트리플 체크를 해준다.*/}\r\n        {/*Section 태그 안의 내용 -> Container -> Title -> Grid -> children*/}\r\n        {upcoming && upcoming.length > 0 && (\r\n          <Section title=\"Upcoming Movies\">\r\n            {upcoming.map(movie =>\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            )}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Movies\">\r\n            {popular.map(movie =>\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            )}\r\n          </Section>\r\n        )}\r\n      </Container>\r\n      )\r\n    }\r\n  </>\r\n\r\n\r\nexport default HomePresenter;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  // 공통 url\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"10923b261ba94d897ac6b81148314a3f\",\r\n    language: \"en-US\"\r\n  }\r\n});\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: id =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: id =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    // moviesApi에 있는 값들\r\n    error: null,\r\n    // error 넣어 처리해줘야 해\r\n    loading: true\r\n  };\r\n\r\n  async componentDidMount() {\r\n    //async, await: 끝날 때까지 다음 진행 X\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying }\r\n        //객체 구조 분해 할당(Destructuring)으로 변수명 설정\r\n      } = await moviesApi.nowPlaying();\r\n      const {\r\n        data: { results: upcoming }\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular }\r\n      } = await moviesApi.popular();\r\n      this.setState({\r\n        nowPlaying, //nowPlaying: nowPlaying,\r\n        upcoming,\r\n        popular\r\n      });\r\n      // throw Error();\r\n    } catch {\r\n      this.setState({\r\n        error: \"결과를 불러 올 수 없습니다.\"\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    // console.log(this.state);\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TV Shows | Nomflix</title>\r\n    </Helmet>\r\n    {\r\n      loading ? (\r\n      <Loader />\r\n      ) : (\r\n      <Container>\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n        {topRated && topRated.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {topRated.map(show =>\r\n              <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  imageUrl={show.poster_path}\r\n                  title={show.original_name}\r\n                  rating={show.vote_average}\r\n                  year={show.first_air_date.substring(0, 4)}\r\n                />\r\n            )}\r\n            {/*span 태그에 넣어 children props가 grid CSS 얻을 수 있게*/}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Shows\">\r\n            {popular.map(show =>\r\n              <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  imageUrl={show.poster_path}\r\n                  title={show.original_name}\r\n                  rating={show.vote_average}\r\n                  year={show.first_air_date.substring(0, 4)}\r\n                />\r\n            )}\r\n          </Section>\r\n        )}\r\n        {airingToday && airingToday.length > 0 && (\r\n          <Section title=\"Airing Today\">\r\n            {airingToday.map(show =>\r\n              <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  imageUrl={show.poster_path}\r\n                  title={show.original_name}\r\n                  rating={show.vote_average}\r\n                  year={show.first_air_date.substring(0, 4)}\r\n                />\r\n            )}\r\n          </Section>\r\n        )}\r\n      </Container>\r\n      )\r\n    }\r\n  </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    // error 넣어줘야 해\r\n    loading: true\r\n  };\r\n\r\n  async componentDidMount() {\r\n     //async, await: 끝날 때까지 다음 진행 X\r\n     try {\r\n       const {\r\n         data: { results: topRated }\r\n         //객체 구조 분해 할당(Destructuring)으로 변수명 설정\r\n       } = await tvApi.topRated();\r\n       const {\r\n         data: { results: popular }\r\n       } = await tvApi.popular();\r\n       const {\r\n         data: { results: airingToday }\r\n       } = await tvApi.airingToday();\r\n       this.setState({\r\n         topRated,  //topRated: topRated,\r\n         popular,\r\n         airingToday\r\n       });\r\n       // throw Error();\r\n     } catch {\r\n       this.setState({\r\n         error: \"결과를 불러 올 수 없습니다.\"\r\n       });\r\n     } finally {\r\n       this.setState({ loading: false });\r\n     }\r\n   }\r\n\r\n  render() {\r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n    // console.log(this.state);\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 28px;\r\n  width: 100%;\r\n  margin: 50px 0;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  loading,\r\n  searchTerm,\r\n  handleSubmit,\r\n  updateTerm,\r\n  error\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title>Search | Joamflix</title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input\r\n        placeholder=\"Search Movies or TV Shows...\"\r\n        value={searchTerm}\r\n        onChange={updateTerm}\r\n      />\r\n    </Form>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {error && <Message text={error} color=\"#e74c3c\"/>}\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map(movie => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date ? movie.release_date.substring(0, 4) : \"\"}\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}  {/*3 CHECK*/}\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Show Results\">\r\n            {tvResults.map(show => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date ? show.first_air_date.substring(0, 4) : \"\"}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}  {/*3 CHECK*/}\r\n        {tvResults &&\r\n         movieResults &&\r\n         tvResults.length === 0 &&\r\n         movieResults.length === 0 && (\r\n           <Message text=\"해당 결과가 없습니다.\" color=\"#95a5a6\" />\r\n        )}\r\n      </>\r\n    )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  error: PropTypes.string,\r\n  searchTerm: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n// Search는 상호작용을 필요로 하므로 다른 파일들과 좀 다름ㅁ\r\n","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi, tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    loading: false,\r\n    // 디폴트로 아무것도 로딩하지 않음\r\n    error: null\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    console.log(e);\r\n    e.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  updateTerm = (e) => {\r\n    const {\r\n      target: { value }\r\n    } = e;  //e.target.value --> value\r\n    this.setState({ searchTerm: value });\r\n  }\r\n\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    this.setState({ loading: true });\r\n    try {\r\n      const {\r\n        data: { results: movieResults }\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults }\r\n      } = await tvApi.search(searchTerm);\r\n      this.setState({\r\n        movieResults, //movieResults: movieResults,\r\n        tvResults\r\n      });\r\n      // throw Error();\r\n    } catch {\r\n      this.setState({ error: \"결과를 불러 올 수 없습니다.\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n    // console.log(this.state);\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        loading={loading}\r\n        error={error}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px);\r\n  opacity: 0.5;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 1;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 30%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 12px;\r\n  opacity: 0.7;\r\n  line-height: 1.5;\r\n  width: 50%;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {result.original_title ? result.original_title : result.original_name}{\" \"}\r\n          | Nomflix\r\n        </title>\r\n      </Helmet>\r\n      <Backdrop\r\n        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n      />\r\n      <Content>\r\n        <Cover\r\n          bgImage={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/original${result.poster_path}`\r\n              : require(\"assets/noPosterSmall.png\")\r\n          }\r\n        />\r\n        <Data>\r\n          <Title>\r\n            {result.original_title\r\n              ? result.original_title\r\n              : result.original_name}\r\n            {/*Movie일 경우 title, TV일 경우 name*/}\r\n          </Title>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date\r\n                ? result.release_date.substring(0, 4)\r\n                : result.first_air_date.substring(0, 4)}\r\n              {/*Movie일 경우 release_date, TV일 경우 first_air_date*/}\r\n            </Item>\r\n            <Divider>•</Divider>\r\n            <Item>\r\n              {result.runtime ? result.runtime : result.episode_run_time[0]} min\r\n              {/*Movie일 경우 runtime, TV일 경우 episode_run_time*/}\r\n            </Item>\r\n            <Divider>•</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1\r\n                    ? genre.name\r\n                    : `${genre.name} / `\r\n                )}\r\n            </Item>\r\n          </ItemContainer>\r\n          <Overview>{result.overview}</Overview>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi, tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      location: { pathname }\r\n    } = props;\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\")\r\n      // this.로 변수를 선언하여 \"함수\"가 아닌 \"클래스\"의 변수로\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // id가 숫자가 아닌 경우, /로 return\r\n    const {\r\n      match: {\r\n        params: { id }\r\n      },\r\n      history: { push },\r\n      location: { pathname }\r\n    } = this.props;\r\n    const { isMovie } = this.state;\r\n\r\n    const parsedId = Number(id);  //or parseInt()\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\");\r\n    }\r\n\r\n    let result = null;\r\n    try {\r\n      if (isMovie) {\r\n        const request = await moviesApi.movieDetail(parsedId);\r\n        result = request.data;\r\n        // ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        const request = await tvApi.showDetail(parsedId);\r\n        result = request.data;\r\n        // ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n      // console.log(requset);\r\n      console.log(result);\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n      // result: result로 state에 result 값 반환\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    // console.log(this.props);\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Header from \"Components/Header\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" exact component={TV} />\r\n        <Route path=\"/search\" exact component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n        <Redirect from=\"*\" to=\"/\" />\r\n      </Switch>\r\n    </>\r\n  </HashRouter>\r\n);\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20, 20, 20, 1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;\r\n","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\nimport { moviesApi, tvApi } from \"api\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}